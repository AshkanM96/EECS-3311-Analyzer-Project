  Expression currently specified: ?
  Report: Expression is initialized.
->there_exists
  Expression currently specified: (|| ?)
  Report: OK.
->open_set_enumeration
  Expression currently specified: (|| {?})
  Report: OK.
->boolean_constant(False)
  Expression currently specified: (|| {False, ?})
  Report: OK.
->conjoin
  Expression currently specified: (|| {False, (? && nil)})
  Report: OK.
->boolean_constant(True)
  Expression currently specified: (|| {False, (True && ?)})
  Report: OK.
->less_than
  Expression currently specified: (|| {False, (True && (? < nil))})
  Report: OK.
->integer_constant(0)
  Expression currently specified: (|| {False, (True && (0 < ?))})
  Report: OK.
->integer_constant(1)
  Expression currently specified: (|| {False, (True && (0 < 1)), ?})
  Report: OK.
->greater_than
  Expression currently specified: (|| {False, (True && (0 < 1)), (? > nil)})
  Report: OK.
->integer_constant(3)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > ?)})
  Report: OK.
->integer_constant(5)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ?})
  Report: OK.
->equals
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), (? = nil)})
  Report: OK.
->divide
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((? / nil) = nil)})
  Report: OK.
->integer_constant(2)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / ?) = nil)})
  Report: OK.
->integer_constant(0)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = ?)})
  Report: OK.
->integer_constant(0)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), ?})
  Report: OK.
->negation
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! ?)})
  Report: OK.
->equals
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (? = nil))})
  Report: OK.
->integer_constant(2)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = ?))})
  Report: OK.
->negative
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- ?)))})
  Report: OK.
->integer_constant(-2)
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- -2))), ?})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- -2)))})
  Report: OK.
->type_check
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- -2)))})
  Report: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- -2)))}) is type-correct.
->evaluate
  Expression currently specified: (|| {False, (True && (0 < 1)), (3 > 5), ((2 / 0) = 0), (! (2 = (- -2)))})
  Report: Error (Divisor is zero).
