  Expression currently specified: ?
  Report: Expression is initialized.
->for_all
  Expression currently specified: (&& ?)
  Report: OK.
->open_set_enumeration
  Expression currently specified: (&& {?})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {?})
  Report: Error: (Set enumeration must be non-empty).
->add
  Expression currently specified: (&& {(? + nil)})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {(? + nil)})
  Report: Error (Set enumeration is not being specified).
->integer_constant(2)
  Expression currently specified: (&& {(2 + ?)})
  Report: OK.
->integer_constant(3)
  Expression currently specified: (&& {(2 + 3), ?})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {(2 + 3)})
  Report: OK.
->evaluate
  Expression currently specified: (&& {(2 + 3)})
  Report: Error (Expression is not type-correct).
->reset
  Expression currently specified: ?
  Report: OK.
->for_all
  Expression currently specified: (&& ?)
  Report: OK.
->open_set_enumeration
  Expression currently specified: (&& {?})
  Report: OK.
->equals
  Expression currently specified: (&& {(? = nil)})
  Report: OK.
->add
  Expression currently specified: (&& {((? + nil) = nil)})
  Report: OK.
->add
  Expression currently specified: (&& {(((? + nil) + nil) = nil)})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {(((? + nil) + nil) = nil)})
  Report: Error (Set enumeration is not being specified).
->integer_constant(3)
  Expression currently specified: (&& {(((3 + ?) + nil) = nil)})
  Report: OK.
->integer_constant(2)
  Expression currently specified: (&& {(((3 + 2) + ?) = nil)})
  Report: OK.
->integer_constant(-9)
  Expression currently specified: (&& {(((3 + 2) + -9) = ?)})
  Report: OK.
->negative
  Expression currently specified: (&& {(((3 + 2) + -9) = (- ?))})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {(((3 + 2) + -9) = (- ?))})
  Report: Error (Set enumeration is not being specified).
->integer_constant(4)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ?})
  Report: OK.
->conjoin
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), (? && nil)})
  Report: OK.
->less_than
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((? < nil) && nil)})
  Report: OK.
->integer_constant(5)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < ?) && nil)})
  Report: OK.
->integer_constant(4)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && ?)})
  Report: OK.
->boolean_constant(True)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ?})
  Report: OK.
->disjoin
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), (? || nil)})
  Report: OK.
->negation
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! ?) || nil)})
  Report: OK.
->boolean_constant(False)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || ?)})
  Report: OK.
->boolean_constant(False)
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || False), ?})
  Report: OK.
->close_set_enumeration
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || False)})
  Report: OK.
->evaluate
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || False)})
  Report: False
->type_check
  Expression currently specified: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || False)})
  Report: (&& {(((3 + 2) + -9) = (- 4)), ((5 < 4) && True), ((! False) || False)}) is type-correct.
