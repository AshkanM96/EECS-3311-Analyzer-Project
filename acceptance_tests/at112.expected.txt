  Expression currently specified: ?
  Report: Expression is initialized.
->open_set_enumeration
  Expression currently specified: {?}
  Report: OK.
->difference
  Expression currently specified: {(? \ nil)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({?} \ nil)}
  Report: OK.
->divide
  Expression currently specified: {({(? / nil)} \ nil)}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {({(2 / ?)} \ nil)}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {({(2 / 0), ?} \ nil)}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ ?)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {?})}
  Report: OK.
->divide
  Expression currently specified: {({(2 / 0)} \ {(? / nil)})}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {({(2 / 0)} \ {(2 / ?)})}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {({(2 / 0)} \ {(2 / 0), ?})}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), ?}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {?}}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {2, ?}}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {2}, ?}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {2}}
  Report: OK.
->evaluate
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {2}}
  Report: Error (Divisor is zero).
->type_check
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {2}}
  Report: {({(2 / 0)} \ {(2 / 0)}), {2}} is type-correct.
->reset
  Expression currently specified: ?
  Report: OK.
->open_set_enumeration
  Expression currently specified: {?}
  Report: OK.
->difference
  Expression currently specified: {(? \ nil)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({?} \ nil)}
  Report: OK.
->divide
  Expression currently specified: {({(? / nil)} \ nil)}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {({(2 / ?)} \ nil)}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {({(2 / 0), ?} \ nil)}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ ?)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {?})}
  Report: OK.
->divide
  Expression currently specified: {({(2 / 0)} \ {(? / nil)})}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {({(2 / 0)} \ {(2 / ?)})}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {({(2 / 0)} \ {(2 / 0), ?})}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), ?}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {?}}
  Report: OK.
->boolean_constant(True)
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {True, ?}}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {True}, ?}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {True}}
  Report: OK.
->evaluate
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {True}}
  Report: Error (Divisor is zero).
->type_check
  Expression currently specified: {({(2 / 0)} \ {(2 / 0)}), {True}}
  Report: {({(2 / 0)} \ {(2 / 0)}), {True}} is type-correct.
->reset
  Expression currently specified: ?
  Report: OK.
->open_set_enumeration
  Expression currently specified: {?}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{?}}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {{2, ?}}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{2}, ?}
  Report: OK.
->difference
  Expression currently specified: {{2}, (? \ nil)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{2}, ({?} \ nil)}
  Report: OK.
->divide
  Expression currently specified: {{2}, ({(? / nil)} \ nil)}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {{2}, ({(2 / ?)} \ nil)}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {{2}, ({(2 / 0), ?} \ nil)}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{2}, ({(2 / 0)} \ ?)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{2}, ({(2 / 0)} \ {?})}
  Report: OK.
->divide
  Expression currently specified: {{2}, ({(2 / 0)} \ {(? / nil)})}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / ?)})}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / 0), ?})}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / 0)}), ?}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / 0)})}
  Report: OK.
->evaluate
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / 0)})}
  Report: Error (Divisor is zero).
->type_check
  Expression currently specified: {{2}, ({(2 / 0)} \ {(2 / 0)})}
  Report: {{2}, ({(2 / 0)} \ {(2 / 0)})} is type-correct.
->reset
  Expression currently specified: ?
  Report: OK.
->open_set_enumeration
  Expression currently specified: {?}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{?}}
  Report: OK.
->boolean_constant(True)
  Expression currently specified: {{True, ?}}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{True}, ?}
  Report: OK.
->difference
  Expression currently specified: {{True}, (? \ nil)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{True}, ({?} \ nil)}
  Report: OK.
->divide
  Expression currently specified: {{True}, ({(? / nil)} \ nil)}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {{True}, ({(2 / ?)} \ nil)}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {{True}, ({(2 / 0), ?} \ nil)}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{True}, ({(2 / 0)} \ ?)}
  Report: OK.
->open_set_enumeration
  Expression currently specified: {{True}, ({(2 / 0)} \ {?})}
  Report: OK.
->divide
  Expression currently specified: {{True}, ({(2 / 0)} \ {(? / nil)})}
  Report: OK.
->integer_constant(2)
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / ?)})}
  Report: OK.
->integer_constant(0)
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / 0), ?})}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / 0)}), ?}
  Report: OK.
->close_set_enumeration
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / 0)})}
  Report: OK.
->evaluate
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / 0)})}
  Report: Error (Divisor is zero).
->type_check
  Expression currently specified: {{True}, ({(2 / 0)} \ {(2 / 0)})}
  Report: {{True}, ({(2 / 0)} \ {(2 / 0)})} is type-correct.
